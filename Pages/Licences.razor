@page "/licenses"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<link rel="stylesheet" href="css/main.css">
<div class="header">
    <img class="logo" src="icons/Logo_GRAFFinteractive_Default.svg" alt="">
    <p>GRAFF Interactive Validator</p>
    <img src="icons/FAB.svg" alt="">
</div>
<div class="content">
    @foreach(var lic in _licenses)
    {
        <div class="card">
            <div class="card-top-content">
                @if(lic.iconPath == string.Empty)
                {
                    <img src="icons/IconDefault.svg" alt="">
                }
                else
                {
                    <img src="@lic.iconPath" alt="">   
                }
                <div class="project-info">
                    <h1>@lic.productName</h1>
                    <h2>@lic.companyName</h2>
                </div>
                <div class="status">
                    @if(lic.status)
                    {
                        <h3 style="font-size: 11px; color: #6DD58C;">ON</h3>
                        <div class="status-icon-on"></div>
                    }
                    else
                    {
                        <h3 style="font-size: 11px; color: #DA0000;">OFF</h3>
                        <div class="status-icon-off"></div>
                    }
                </div>
            </div>
            <div class="card-bottom-content">
                <div class="state">
                    <p>Одобрено копий:</p>
                    <p>Активировано копий:</p>
                    <p>Сейчас онлайн:</p>
                </div>
                <div class="state-value">
                    <p>@lic.licensesCounter</p>
                    <p>@_computers.Count(x => x.productName == lic.productName)</p>
                    <p>@_computers.Where(x => x.productName == lic.productName).Count(x => x.isActive)</p>
                </div>
                <img src="icons/FAB_Edit.svg" alt="">
            </div>
        </div>
    }
</div>

@code {
    private HubConnection connection;
    protected List<License> _licenses = new List<License>();
    protected List<Computer> _computers = new List<Computer>();

    protected async override Task OnInitializedAsync()
    {
        connection = new HubConnectionBuilder()
            .WithUrl(NavigationManager
            .ToAbsoluteUri("/adminhub"))
            .Build();

        connection.On<List<License>, List<Computer>>("OnLicensesListResponse", (licenses, computers) =>
        {
            _licenses = licenses;
            _computers = computers;
            StateHasChanged();
        });

        connection.On<License>("OnAddNewLicense", license =>
        {
            _licenses.Add(license);
            StateHasChanged();
        });

        connection.On<License>("OnLicenseStatusChanged", license =>
        {
            var licenseIndex = _licenses.IndexOf(_licenses.Find(x => x.id == license.id));
            _licenses[licenseIndex] = license;
            StateHasChanged();
        });

        connection.On<string>("OnLicenseRemoved", licenseRegData =>
        {
            _licenses.Remove(_licenses.Find(x => x.registrationDate == licenseRegData));
            StateHasChanged();
        });

        connection.On<Computer>("OnAddNewComputer", computer =>
        {
            _computers.Add(computer);
            StateHasChanged();
        });

        connection.On<Computer>("OnComputerSatusChanged", computer =>
        {
            var computerIndex = _computers.IndexOf(_computers.Find(x => x.id == computer.id));
            _computers[computerIndex] = computer;
            StateHasChanged();
        });

        connection.On<string>("OnComputerRemoved", computerRegDate =>
        {
            _computers.Remove(_computers.Find(x => x.activationDate == computerRegDate));
            StateHasChanged();
        });

        await connection.StartAsync();
        await connection.SendAsync("OnLicensesListRequest");
    }

    public async ValueTask DisposeAsync()
    {
        if (connection != null)
        {
            await connection.StopAsync();
            await connection.DisposeAsync();
        }
    }
}