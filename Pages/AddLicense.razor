@using Microsoft.AspNetCore.SignalR.Client
@inject HubConnection HubConnection
@inject NavigationManager NavigationManager
@inject DatabaseService DatabaseService
@page "/addlicense"

@if(!DatabaseService.isAuthorized)
{
    NavigationManager.NavigateTo("/authorization");
}

<link rel="stylesheet" href="css/main.css">
<div class="header" style="filter: blur(@blurValue)">
    <img class="logo" style="margin-left: 0; margin-right: auto" src="icons/back.svg" alt="" @onclick="@(()=>NavigationManager.NavigateTo("/"))">
    <p>Добавить лицензию</p>
    <img style="margin-right: 0; margin-left: auto" src="icons/menu.svg" alt="">
</div>
<div class="content" style="filter: blur(@blurValue)">
    <div class="card">
        <Inputfield TopText="Название приложения" Placeholder="Название приложения" Type=Inputfield.InputType.Text OnValueChanged="@(value => { productNameValue = value; OnInputfieldValueChanged(); })"></Inputfield>
        <Inputfield TopText="Название компании-заказчика" Placeholder="Название компании" Type=Inputfield.InputType.Text OnValueChanged="@(value => { companyNameValue = value; OnInputfieldValueChanged(); } )"></Inputfield>
        <Inputfield TopText="Количество одобренных копий, шт" Placeholder="Количество устройств" Type=Inputfield.InputType.Number OnValueChanged="@(value => { computersValue = value; OnInputfieldValueChanged(); })"></Inputfield>
        <Inputfield TopText="Время триального периода, ч" Placeholder="Триальный период" Type=Inputfield.InputType.Number OnValueChanged="@(value => { trialPeriodValue = value; OnInputfieldValueChanged(); })"></Inputfield>
        <div class="buttons">
            <div style="@addLicenseStyle" @onclick="@(()=>OnAddLicenseButtonClick())" class="button">Добавить лицензию</div>
            <div @onclick="@(()=>NavigationManager.NavigateTo("/"))" style="background: none" class="button">Отмена</div>
        </div>
    </div>
</div>
@if(showPasswordField)
{
    <PasswordField message="Данные сохранены!" OnClosed="@(()=>{showPasswordField = !showPasswordField; StateHasChanged(); })" CorrectPasswordFieldAction="@AddNewLicense"></PasswordField>   
}

@code {
    string productNameValue;
    string companyNameValue;
    string computersValue;
    string trialPeriodValue;

    private string addLicenseStyle = "";
    private bool showPasswordField;
    private string blurValue = "0px";
    private string passwordValue;

    //protected override async Task OnInitializedAsync()
    //{
    //    if (HubConnection.State == HubConnectionState.Disconnected) await HubConnection.StartAsync();
    //}

    public void OnAddLicenseButtonClick()
    {
        if (addLicenseStyle == string.Empty)
            return;

        showPasswordField = true;
        StateHasChanged();
    }

    public async void AddNewLicense()
    {
        License newLicense = new License()
        {
            productName = productNameValue,
            companyName = companyNameValue,
            licensesCounter = int.Parse(computersValue),
            trialPeriod = int.Parse(trialPeriodValue),
            iconPath = "/icons/IconDefault.svg",
            status = true
        };

        await HubConnection.SendAsync("OnAddNewLicense", newLicense);
        NavigationManager.NavigateTo("/");
    }

    public void OnInputfieldValueChanged()
    {
        if (!string.IsNullOrEmpty(productNameValue) &&
        !string.IsNullOrEmpty(companyNameValue) &&
        !string.IsNullOrEmpty(computersValue) &&
        !string.IsNullOrEmpty(trialPeriodValue))
        {
            addLicenseStyle = "background-color: #C4EED0; border-color: #C4EED0; color: inherit;";
        }
        else addLicenseStyle = string.Empty;
    }
}
