@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject HubConnection HubConnection
@inject NavigationManager NavigationManager

<link rel="stylesheet" href="css/main.css">
<div class="header">
    <img class="logo" src="icons/Logo_GRAFFinteractive_Default.svg" alt="">
    <p>GRAFF Interactive Validator</p>
    <img @onclick="@(()=>NavigationManager.NavigateTo("/addlicense"))" src="icons/burger.svg" alt="">
</div>
<div class="content">
    @foreach(var lic in licenses)
    {
        <div class="card" @onclick="@(eventArgs => NavigationManager.NavigateTo($"/licenseinfo/{lic.id}"))">
            <div class="card-top-content">
                @if(lic.iconPath == string.Empty)
                {
                    <img src="icons/IconDefault.svg" alt="">
                }
                else
                {
                    <img src="@lic.iconPath" alt="">
                }
                <div class="info">
                    <h1>@lic.productName</h1>
                    <h2>@lic.companyName</h2>
                </div>
                <div class="status">
                    @if(lic.status)
                    {
                        <h3 style="font-size: 11px; color: #6DD58C;">ON</h3>
                        <div class="status-icon-on"></div>
                    }
                    else
                    {
                        <h3 style="font-size: 11px; color: #DA0000;">OFF</h3>
                        <div class="status-icon-off"></div>
                    }
                </div>
            </div>
            <div class="card-bottom-content">
                <div class="state">
                    <p>Одобрено копий:</p>
                    <p>Активировано копий:</p>
                    <p>Сейчас онлайн:</p>
                </div>
                <div class="state-value">
                    <p>@lic.licensesCounter</p>
                    <p>@computers.Count(x => x.productName == lic.productName)</p>
                    <p>@computers.Where(x => x.productName == lic.productName).Count(x => x.isActive)</p>
                </div>
                <img src="icons/FAB_Edit.svg" alt="">
            </div>
        </div>
    }
</div>

@code {
    private List<License> licenses = new List<License>();
    private List<Computer> computers = new List<Computer>();

    private string[] iconPath = new string[4] { "/icons/keyboard.svg", "/icons/keyboard.svg", "/icons/keyboard.svg", "/icons/keyboard.svg" };

    protected async override Task OnInitializedAsync()
    {
        HubConnection.On<List<License>, List<Computer>>("OnLicensesListResponse", (licenses, computers) =>
        {
            this.licenses = licenses;
            this.computers = computers;
            StateHasChanged();
        });

        HubConnection.On<License>("OnAddNewLicense", license =>
        {
            if (licenses.Count(x => x.productName == license.productName) == 1) return;

            licenses.Add(license);
            StateHasChanged();
        });

        HubConnection.On<License>("OnLicenseStatusChanged", license =>
        {
            var licenseIndex = licenses.IndexOf(licenses.Find(x => x.id == license.id));
            licenses[licenseIndex] = license;
            StateHasChanged();
        });

        HubConnection.On<string>("OnLicenseRemoved", licenseRegData =>
        {
            licenses.Remove(licenses.Find(x => x.registrationDate == licenseRegData));
            StateHasChanged();
        });

        HubConnection.On<Computer>("OnAddNewComputer", computer =>
        {
            if (computers.Count(x => x.productName == computer.productName) == 1) return;

            computers.Add(computer);
            StateHasChanged();
        });

        HubConnection.On<Computer>("OnComputerSatusChanged", computer =>
        {
            var computerIndex = computers.IndexOf(computers.Find(x => x.id == computer.id));
            computers[computerIndex] = computer;
            StateHasChanged();
        });

        HubConnection.On<string>("OnComputerRemoved", computerRegDate =>
        {
            computers.Remove(computers.Find(x => x.activationDate == computerRegDate));
            StateHasChanged();
        });

        if(HubConnection.State != HubConnectionState.Connected) await HubConnection.StartAsync();
        await HubConnection.SendAsync("OnLicensesListRequest");
    }

    private async void OnComputerBanned(string hardwareId, bool banState)
    {
        await HubConnection.SendAsync("OnComputerBanned", hardwareId, banState);
        computers.Find(x => x.hardwareId == hardwareId).isBanned = banState;

        StateHasChanged();
    }
}