@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject HubConnection HubConnection
@inject NavigationManager NavigationManager
@inject DatabaseService DatabaseService

<link rel="stylesheet" href="css/main.css">
<div class="header">
    <img class="logo" src="icons/Logo_GRAFFinteractive_Default.svg" alt="">
    <p>GRAFF Interactive Validator</p>
    <img @onclick="@(()=>NavigationManager.NavigateTo("/addlicense"))" src="icons/burger.svg" alt="">
</div>
<div class="content">
    @foreach(var lic in licenses)
    {
        List<Computer> licComputers = DatabaseService.GetComputers(lic.productName);
        bool isWarining = lic.licensesCounter < licComputers.Count && (licComputers.Count - lic.licensesCounter) - licComputers.Count(x => x.isBanned) != 0;
        <LicenseCard License="@lic" IsWarning="@isWarining" Computers="@computers"></LicenseCard>
    }
</div>

@code {
    private List<License> licenses = new List<License>();
    private List<Computer> computers = new List<Computer>();

    private string[] iconPath = new string[4] { "/icons/keyboard.svg", "/icons/keyboard.svg", "/icons/keyboard.svg", "/icons/keyboard.svg" };

    protected async override Task OnInitializedAsync()
    {
        //@if(!DatabaseService.isAuthorized)
        //{
        //    NavigationManager.NavigateTo("/authorization");
        //}

        licenses = DatabaseService.GetLicenses();
        computers = DatabaseService.GetComputers();
        StateHasChanged();

        HubConnection.On<License>("OnAddNewLicense", license =>
        {
            if (licenses.Count(x => x.productName == license.productName) == 1) return;

            licenses.Add(license);
            StateHasChanged();
        });

        HubConnection.On<License>("OnLicenseStatusChanged", license =>
        {
            var licenseIndex = licenses.IndexOf(licenses.Find(x => x.id == license.id));
            licenses[licenseIndex] = license;
            StateHasChanged();
        });

        HubConnection.On<string>("OnLicenseRemoved", licenseRegData =>
        {
            licenses.Remove(licenses.Find(x => x.registrationDate == licenseRegData));
            StateHasChanged();
        });

        HubConnection.On<Computer>("OnAddNewComputer", computer =>
        {
            if (computers.Count(x => x.productName == computer.productName) == 1) return;

            computers.Add(computer);
            StateHasChanged();
        });

        HubConnection.On<Computer>("OnComputerStatusChanged", computer =>
        {
            int index = computers.IndexOf(computers.Find(x => x.hardwareId == computer.hardwareId && x.productName == computer.productName));
            computers[index] = computer;

            StateHasChanged();
        });

        HubConnection.On<string>("OnComputerRemoved", computerRegDate =>
        {
            computers.Remove(computers.Find(x => x.activationDate == computerRegDate));
            StateHasChanged();
        });

        if(HubConnection.State != HubConnectionState.Connected) await HubConnection.StartAsync();
    }
}