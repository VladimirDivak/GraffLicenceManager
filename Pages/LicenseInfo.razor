@page "/licenseinfo/{licenseId}"
@using Microsoft.AspNetCore.SignalR.Client
@inject HubConnection HubConnection
@inject NavigationManager NavigationManager
@inject DatabaseService DatabaseService

<link rel="stylesheet" href="css/main.css">
<div class="header">
    <img class="logo" style="margin-left: 0; margin-right: auto" src="icons/back.svg" alt="" @onclick="@(()=>NavigationManager.NavigateTo("/"))">
    <p>@selectedLicense?.productName</p>
    <img style="margin-right: 0; margin-left: auto" src="icons/menu.svg" alt="">
</div>
<div class="content">
    <h2>Информация о лицензии</h2>
    <div class="card">
        <div class="card-top-content">
            @if(selectedLicense?.iconPath == string.Empty)
            {
                <img src="icons/IconDefault.svg" alt="">
            }
            else
            {
                <img src="@selectedLicense?.iconPath" alt="">
            }
            <div class="info">
                <h1>@selectedLicense?.productName</h1>
                <h2>@selectedLicense?.companyName</h2>
            </div>
            <div class="status">
                @if(selectedLicense?.status == true)
                {
                    <h3 style="font-size: 11px; color: #6DD58C;">ON</h3>
                    <div class="status-icon-on"></div>
                }
                else
                {
                    <h3 style="font-size: 11px; color: #DA0000;">OFF</h3>
                    <div class="status-icon-off"></div>
                }
            </div>
        </div>
        <div class="card-bottom-content">
            <div class="state">
                <p>Лицензия добавлена:</p>
                <p>Доступ без интернета:</p>
                <p style="margin: 8px"> </p>
                <p>Одобрено копий:</p>
                <p>Активировано копий:</p>
                <p>Сейчас онлайн:</p>
            </div>
            <div class="state-value">
                <p>@GetCorrectDateFormat(selectedLicense?.registrationDate)</p>
                <p>@selectedLicense?.trialPeriod</p>
                <p style="margin: 8px"> </p>
                <p>@selectedLicense?.licensesCounter</p>
                <p>@computers.Count()</p>
                <p>@computers.Where(x => x.isActive).Count()</p>
            </div>
            <img style="position: absolute; right: 48px; bottom: 0" src="icons/FAB_Edit.svg" alt="" @onclick="@(()=>{ showCounterChangeField = true; showLicensePasswordField = false; showComputerPasswordField = false; })">
            @if(selectedLicense?.status == true)
            {
                <img src="/icons/FAB_PlayPause.svg" alt="" @onclick="@(()=>{ showLicensePasswordField = true; showComputerPasswordField = false; showCounterChangeField = false; })">
            }
            else
            {
                <img src="/icons/FAB_Play.svg" alt="" @onclick="@(()=>{ showLicensePasswordField = true; showComputerPasswordField = false; showCounterChangeField = false; })">
            }
        </div>
    </div>
    <h2>Привязанные компьютеры</h2>
    @foreach(var computer in computers)
    {
        CardPosition cardPos;
        bool isWarningComputerStatus = false;

        if(computersCounter == 0) cardPos = CardPosition.Top;
        else if(computersCounter > 0 && computersCounter < computers.Count() - 1)  cardPos = CardPosition.Center;
        else cardPos = CardPosition.Bottom;
        computersCounter++;
        if (computers.Count() == 1) cardPos = CardPosition.Full;
        if (computersCounter > selectedLicense.licensesCounter) isWarningComputerStatus = true;

        <ComputerCard IsWarningStatus="@isWarningComputerStatus" CardPosition="@cardPos" Computer="@computer" OnComputerStatusButtonClick="@(()=>OnComputerBanStatusButtonClick(computer))"></ComputerCard>

        if (computers.IndexOf(computer) == computers.IndexOf(computers.Last())) computersCounter = 0;
    }
</div>
@if(showComputerPasswordField)
{
    <PasswordField OnClosed="OnPasswordFieldClosed" message="Статус доступа компьютера изменён!" CorrectPasswordFieldAction="OnComputerBanned"></PasswordField>
}
else if(showLicensePasswordField)
{
    <PasswordField OnClosed="OnPasswordFieldClosed" message="Статус лицензии изменён!" CorrectPasswordFieldAction="OnLicenseStatusChanged"></PasswordField>
}
else if(showCounterChangeField)
{
    <PasswordField SelectedLicense="selectedLicense" OnClosed="OnPasswordFieldClosed" message="Лицензия изменена!" showLicensesCounterField="true"></PasswordField>   
}

@code {
    [Parameter]
    public string licenseId { get; set; }

    License selectedLicense;
    Computer selectedComputer;

    string computerIconPath;
    string cardPosition = "card-top";

    List<Computer> computers = new List<Computer>();

    int computersCounter;

    bool showComputerPasswordField;
    bool showLicensePasswordField;
    bool showCounterChangeField;

    protected async override Task OnInitializedAsync()
    {
        selectedLicense = DatabaseService.GetLicenses().Find(x => x.id == licenseId);
        computers = DatabaseService.GetComputers(selectedLicense.productName)
            .OrderBy(x => DateTime.Parse(x.activationDate))
            .ToList();

        StateHasChanged();

        HubConnection.On<License>("OnLicenseStatusChanged", license =>
        {
            if(license.productName == selectedLicense.productName)
            {
                selectedLicense = license;
            }

            StateHasChanged();
        });
        HubConnection.On<Computer>("OnAddNewComputer", computer =>
        {
            if (computer.productName != selectedLicense.productName) return;
            if (computers.Count(x => x.hardwareId == computer.hardwareId) == 1) return;
            computers.Add(computer);

            StateHasChanged();
        });

        HubConnection.On<Computer>("OnComputerStatusChanged", computer =>
        {
            if (computer.productName != selectedLicense.productName) return;

            int computerIndex = computers.IndexOf(computers.Find(x => x.hardwareId == computer.hardwareId));
            computers[computerIndex] = computer;

            StateHasChanged();
        });

        HubConnection.On<string>("OnComputerRemoved", computerRegDate =>
        {
            try
            {
                computers.Remove(computers.Find(x => x.activationDate == computerRegDate));
            }
            catch{ }

            StateHasChanged();
        });

        if (HubConnection.State == HubConnectionState.Disconnected) await HubConnection.StartAsync();
        await HubConnection.SendAsync("OnLicensesListRequest");
    }

    private string GetCorrectDateFormat(string currentFormat)
    {
        if (currentFormat == null) return "";

        DateTime correctFormat = DateTime.Parse(currentFormat);
        return correctFormat.ToShortDateString();
    }

    private void OnComputerBanStatusButtonClick(Computer computer)
    {
        selectedComputer = computer;

        showComputerPasswordField = true;
        showLicensePasswordField = false;
        showCounterChangeField = false;
    }

    private async void OnComputerBanned()
    {
        await HubConnection.SendAsync("OnComputerBanned", selectedComputer.hardwareId, selectedComputer.productName);
        Computer computer = computers.Find(x => x.hardwareId == selectedComputer.hardwareId && x.productName == selectedComputer.productName);
        int index = computers.IndexOf(computer);
        computer.isBanned = !computer.isBanned;
        computers[index] = computer;

        StateHasChanged();
    }

    private async void OnLicenseStatusChanged()
    {
        await HubConnection.SendAsync("OnLicenseStatusChanged", selectedLicense.productName, !selectedLicense.status);
        StateHasChanged();
    }

    private void OnPasswordFieldClosed()
    {
        showComputerPasswordField = false;
        showLicensePasswordField = false;
        showCounterChangeField = false;

        StateHasChanged();
    }
}
