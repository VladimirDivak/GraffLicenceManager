@namespace GraffLicenceManager.Pages
@using Microsoft.AspNetCore.SignalR.Client
@inject HubConnection HubConnection

<div class="password-field">
    <div style="border-color: @borederColor" class="password-window">
        @if(isCorrect)
        {
            <img style="height: 128px; margin: auto;" src="/icons/ok.svg" alt="">
            <p style=
            "margin-top: 0;
            margin-bottom: auto;
            margin-left: auto;
            margin-right: auto;

            color: #C4EED0;

            font-style: normal;
            font-weight: normal;
            font-size: 24px;
            line-height: 32px;
            text-align: center;">
            @Message</p>
        }
        else
        {
            @if(showLicensesCounterField)
            {
                <h2>Введите новое количество слотов</h2>
                <div style="border-color: @inputfieldColor" class="inputfield">
                    <input type="number" style="color: @inputfieldTextColor" @bind-value="@computersCounterValue" @onfocusout="@(() => OnInputfieldFocusOut())" @onfocus="@(() => OnInputfieldFocused())">
                    <img style="opacity: @inputfieldIconOpacity" src=@iconPath alt="">
                </div>
            }

            <h2>Введите пароль подтверждения</h2>
            <div style="border-color: @inputfieldColor" class="inputfield">
                <input type="password" @oninput="@((e)=>OnInputfieldChanged(e))" style="color: @inputfieldTextColor" value="@passwordValue" @onfocusout="@(() => OnInputfieldFocusOut())" @onfocus="@(() => OnInputfieldFocused())">
                <img style="opacity: @inputfieldIconOpacity" src=@iconPath alt="">
            </div>
            <div class="buttons">
                <div style="@acceptButtonStyle" @onclick="@(()=> PasswordValidation())" class="button">Подтвердить</div>
                <div style="background-color: inherit" @onclick="@(()=>OnClosed())" class="button">Отмена</div>
            </div>
        }
        </div>
</div>

@code {
    [Parameter]
    public Action CorrectPasswordFieldAction { get; set; }
    [Parameter]
    public Action OnClosed { get; set; }
    [Parameter]
    public string Message { get; set; }
    [Parameter]
    public bool showLicensesCounterField { get; set; }
    [Parameter]
    public License SelectedLicense { get; set; }

    string acceptButtonStyle;
    string inputfieldTextColor = "#8E918F";
    string inputfieldColor = "#8E918F";
    string iconPath = "/icons/keyboard.svg";

    string passwordValue;
    int computersCounterValue
    {
        get
        {
            return SelectedLicense.licensesCounter;
        }
        set
        {
            SelectedLicense.licensesCounter = value;
        }
    }

    int inputfieldIconOpacity = 1;

    string password = "ffraG";
    string borederColor;

    bool isCorrect;

    public void OnInputfieldChanged(ChangeEventArgs args)
    {
        passwordValue = args?.Value?.ToString();
        if(!string.IsNullOrEmpty(passwordValue))
        {
            acceptButtonStyle = "background-color: #C4EED0; border-color: #C4EED0; color: inherit;";
            inputfieldColor = "#E3E3E3";
            inputfieldTextColor = "#E3E3E3";
        }
        else
        {
            acceptButtonStyle = string.Empty;
            inputfieldTextColor = "#F2B8B5";
            inputfieldColor = "#F2B8B5";
        }
    }

    public void OnInputfieldFocused()
    {
        if (inputfieldColor == "#8E918F")
        {
            inputfieldColor = "#E3E3E3";
            inputfieldTextColor = "#E3E3E3";
        }
        inputfieldIconOpacity = 0;
    }

    public void OnInputfieldFocusOut()
    {
        if (inputfieldColor == "#E3E3E3")
        {
            inputfieldColor = "#8E918F";
            inputfieldTextColor = "#8E918F";
        }
        inputfieldIconOpacity = 1;
    }

    public async void PasswordValidation()
    {
        if(passwordValue == password)
        {
            isCorrect = true;
            borederColor = "#C4EED0";

            await Task.Delay(2000);

            isCorrect = false;
            borederColor = string.Empty;
            if(CorrectPasswordFieldAction != null) CorrectPasswordFieldAction();
            if(showLicensesCounterField)
            {
                SelectedLicense.licensesCounter = computersCounterValue;
                await HubConnection.SendAsync("OnChangeLicense", SelectedLicense);

                showLicensesCounterField = false;
            }
            passwordValue = string.Empty;
            OnClosed?.Invoke();
        }
        else
        {
            inputfieldTextColor = "#F2B8B5";
            inputfieldColor = "#F2B8B5";
        }
    }
}